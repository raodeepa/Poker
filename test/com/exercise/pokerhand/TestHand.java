package com.exercise.pokerhand;

import org.junit.Test;

import com.exercise.pokerhand.Card;
import com.exercise.pokerhand.Deck;
import com.exercise.pokerhand.Hand;

public class TestHand {

	@Test
	public void test() {

		// Some ranks are difficult to be generated by the random number
		// generated hence hard code the ranks and test the evaluation
		checkForRoyalFlush();
		checkForTwoPair();
		checkForHighCard();
		checkForStraightFlush();
		checkForOnePair();
		checkForFullHouse();
		checkForFlush();
		checkForStraight();
		checkForThreeOfaKind();
		checkforFourofaKind();

		// Most of the common ranks will be tested by the randomly generated
		// cards
		Deck deck = new Deck(100);
		try {
			while (deck.getRemainingCards() >= 5) {
				Hand hand = new Hand(deck);

				System.out.println();
				hand.displayHand();
				System.out.println();
				System.out.print("Rank:");
				hand.evaluateHand();
				System.out.println(hand.getRank());

			}
		} catch (Exception e) {
			System.out
					.println("Not enough cards in the deck. Need to reshuffle.");
		}

	}

	private void checkForFlush() {

		Deck deck = new Deck(5);
		deck.clear();
		Card card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("s", "6", 5);
		deck.addCard(card);
		card = new Card("s", "4", 3);
		deck.addCard(card);
		displayRank(deck);
	}

	/**
	 * Check the hand for four of a kind. Check that 4 cards have the same rank.
	 * Returns true if exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkforFourofaKind() {

		Deck deck = new Deck(5);
		deck.clear();
		Card card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("h", "7", 6);
		deck.addCard(card);
		card = new Card("d", "8", 7);
		deck.addCard(card);
		card = new Card("d", "7", 6);
		deck.addCard(card);
		card = new Card("h", "7", 6);
		deck.addCard(card);
		displayRank(deck);

	}

	/**
	 * Check the hand for full house. Check that 3 cards have the same rank AND
	 * the remaining 2 cards have the same rank. i.e check for three of a kind
	 * and one pair Returns true if exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForFullHouse() {
		// full house
		Deck deck = new Deck(5);
		deck.clear();
		Card card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("d", "7", 6);
		deck.addCard(card);
		card = new Card("h", "8", 7);
		deck.addCard(card);
		displayRank(deck);
	}

	/**
	 * Check the hand for High card. Check that there is at least 1 card whose
	 * rank is either 0 or greater than 9 but less than 13. Returns true if
	 * exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForHighCard() {

		Deck deck = new Deck(5);
		deck.clear();

		Card card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("d", "K", 10);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "J", 12);
		deck.addCard(card);
		displayRank(deck);
		// high card
		deck.clear();

		card = new Card("s", "K", 10);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("d", "A", 0);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "Q", 11);
		deck.addCard(card);
		displayRank(deck);
	}

	/**
	 * Check the hand for one pair. Check that exactly 2 cards have the same
	 * rank. Returns true if exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForOnePair() {
		Deck deck = new Deck(5);
		deck.clear();

		Card card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("d", "K", 10);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "K", 10);
		deck.addCard(card);
		displayRank(deck);
		// high card
		deck.clear();

		card = new Card("s", "K", 10);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("d", "K", 10);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "K", 11);
		deck.addCard(card);
		displayRank(deck);

	}

	/**
	 * Check the hand for royal flush. Check that all 5 cards have the same suit
	 * and all the ranks are in this group (0,9,10,11,12). Returns true if
	 * exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForRoyalFlush() {
		// royal flush
		Deck deck = new Deck(5);
		deck.clear();

		Card card = new Card("s", "K", 10);
		deck.addCard(card);
		card = new Card("s", "A", 0);
		deck.addCard(card);
		card = new Card("s", "Q", 11);
		deck.addCard(card);
		card = new Card("s", "J", 12);
		deck.addCard(card);
		card = new Card("s", "10", 9);
		deck.addCard(card);
		displayRank(deck);
		
		
		
		deck.clear();
		//negative test case
//		card = new Card("s", "K", 10);
//		deck.addCard(card);
//		card = new Card("s", "A", 0);
//		deck.addCard(card);
//		card = new Card("s", "Q", 11);
//		deck.addCard(card);
//		card = new Card("s", "J", 12);
//		deck.addCard(card);
//		card = new Card("s", "10", 9);
//		deck.addCard(card);
//		displayRank(deck);
	}

	private void displayRank(Deck deck) {
		Hand hand = new Hand(deck);
		System.out.println();
		hand.displayHand();
		System.out.println();
		hand.evaluateHand();
		System.out.println("Rank:" + hand.getRank());
	}

	/**
	 * Check the hand for straight. Check that the rank of all 5 cards are in a
	 * sequence. Returns true if exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForStraight() {
		Deck deck = new Deck(5);
		deck.clear();
		Card card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("d", "7", 6);
		deck.addCard(card);
		card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "6", 5);
		deck.addCard(card);
		card = new Card("s", "4", 3);
		deck.addCard(card);
		displayRank(deck);

	}

	/**
	 * Check the hand for straight flush. Check that all 5 cards have the same
	 * suit and all 5 ranks are in a sequence. Returns true if exists otherwise
	 * false.
	 * 
	 * @return void
	 */
	private void checkForStraightFlush() {

		Deck deck = new Deck(5);
		deck.clear();

		Card card = new Card("s", "9", 8);
		deck.addCard(card);
		card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("s", "6", 5);
		deck.addCard(card);
		card = new Card("s", "10", 9);
		deck.addCard(card);
		displayRank(deck);

		deck.clear();
		card = new Card("s", "8", 7);
		deck.addCard(card);
		card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "6", 5);
		deck.addCard(card);
		card = new Card("s", "4", 3);
		deck.addCard(card);
		displayRank(deck);

	}

	/**
	 * Check the hand for three of a kind. Check that exactly 3 cards have the
	 * same rank. Returns true if exists otherwise false.
	 * 
	 * @return void
	 */
	private void checkForThreeOfaKind() {

		Deck deck = new Deck(5);
		deck.clear();
		Card card = new Card("s", "7", 6);
		deck.addCard(card);
		card = new Card("h", "7", 6);
		deck.addCard(card);
		card = new Card("d", "8", 7);
		deck.addCard(card);
		card = new Card("d", "7", 6);
		deck.addCard(card);
		card = new Card("h", "5", 4);
		deck.addCard(card);
		displayRank(deck);

	}

	/**
	 * Check the hand for two pair. Check that there are 4 cards of which there
	 * exists exactly 2 cards with same rank. Returns true if exists otherwise
	 * false.
	 * 
	 * @return void
	 */
	private void checkForTwoPair() {

		// two pair
		Deck deck = new Deck(5);
		deck.clear();

		Card card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("d", "6", 5);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "4", 3);
		deck.addCard(card);
		displayRank(deck);

		// two pair
		deck.clear();

		card = new Card("s", "5", 4);
		deck.addCard(card);
		card = new Card("s", "2", 1);
		deck.addCard(card);
		card = new Card("d", "6", 5);
		deck.addCard(card);
		card = new Card("c", "6", 5);
		deck.addCard(card);
		card = new Card("h", "2", 1);
		deck.addCard(card);
		displayRank(deck);
	}

}
